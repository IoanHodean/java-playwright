#!/usr/bin/env groovy

pipeline {
    agent any
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 30, unit: 'MINUTES')
    }
    
    environment {
        DOCKER_IMAGE = "test-automation"
        DOCKER_TAG = "${BUILD_NUMBER}"
        WORKSPACE_DIR = "/workspace"
        
        // Test configuration with sensible defaults
        TEST_ENVIRONMENT = "${params.TEST_ENVIRONMENT ?: 'local'}"
        TEST_SUITE = "${params.TEST_SUITE ?: 'smoke'}"
        BROWSER = "${params.BROWSER ?: 'chromium'}"
        HEADLESS = "${params.HEADLESS ?: 'true'}"
    }
    
    parameters {
        choice(
            name: 'TEST_SUITE',
            choices: ['smoke', 'api', 'ui', 'performance', 'all'],
            description: 'Test suite to run'
        )
        choice(
            name: 'TEST_ENVIRONMENT',
            choices: ['local', 'dev', 'staging'],
            description: 'Target environment'
        )
        choice(
            name: 'BROWSER',
            choices: ['chromium', 'firefox', 'webkit'],
            description: 'Browser for UI tests'
        )
        booleanParam(
            name: 'HEADLESS',
            defaultValue: true,
            description: 'Run tests in headless mode'
        )
    }
    
    stages {
        stage('Build & Test') {
            steps {
                script {
                    echo "üöÄ Building test image and running ${TEST_SUITE} tests..."
                    
                    // Build test image
                    sh """
                        cd ${env.WORKSPACE_DIR}
                        docker build -f Dockerfile.test -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                        docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                    """
                    
                    // Run tests based on suite selection
                    runTestSuite(TEST_SUITE)
                }
            }
        }
        
        stage('Process Test Results') {
            steps {
                script {
                    echo "üìä Processing test results and generating reports..."
                    
                    // Ensure directories exist
                    sh """
                        cd ${env.WORKSPACE_DIR}
                        mkdir -p allure-results target/allure-results target/surefire-reports
                        
                        # Copy any additional results that might be scattered
                        find . -name "allure-results" -type d -not -path "./allure-results" -exec cp -r {}/* ./allure-results/ \\; 2>/dev/null || true
                        find . -name "*.json" -path "*/allure-results/*" -exec cp {} ./allure-results/ \\; 2>/dev/null || true
                    """
                    
                    // Process TestNG/Surefire results
                    try {
                        // Check if test results exist and publish them
                        script {
                            if (fileExists('target/surefire-reports')) {
                                def testFiles = sh(
                                    script: 'find target/surefire-reports -name "*.xml" | wc -l',
                                    returnStdout: true
                                ).trim()
                                
                                if (testFiles.toInteger() > 0) {
                                    // Use the step function with TestNG publisher
                                    step([
                                        $class: 'TestNGResultsPublisher',
                                        reportFilenamePattern: 'target/surefire-reports/testng-results.xml'
                                    ])
                                    echo "‚úÖ TestNG results published"
                                }
                            }
                        }
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Test results publishing failed: ${e.getMessage()}"
                    }
                    
                    // Generate and publish Allure report
                    try {
                        allure([
                            includeProperties: false,
                            jdk: '',
                            properties: [],
                            reportBuildPolicy: 'ALWAYS',
                            results: [[path: 'allure-results']]
                        ])
                        echo "‚úÖ Allure report published"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è Failed to publish Allure report: ${e.getMessage()}"
                    }
                    
                    // Archive artifacts for backup
                    try {
                        archiveArtifacts(
                            artifacts: 'target/surefire-reports/*.xml, allure-results/**, screenshots/**, logs/**', 
                            allowEmptyArchive: true,
                            fingerprint: true
                        )
                        echo "‚úÖ Test artifacts archived"
                    } catch (Exception e) {
                        echo "‚ö†Ô∏è No artifacts to archive: ${e.getMessage()}"
                    }
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                script {
                    echo "üßπ Cleaning up..."
                    sh """
                        # Remove test containers and old images
                        docker ps -q --filter ancestor=${DOCKER_IMAGE} | xargs -r docker stop
                        docker ps -aq --filter ancestor=${DOCKER_IMAGE} | xargs -r docker rm
                        docker images ${DOCKER_IMAGE} --format "{{.ID}}" | tail -n +3 | xargs -r docker rmi -f
                    """
                }
            }
        }
    }
    
    post {
        always {
            script {
                echo """
                =====================================================
                    üìä Test Execution Summary
                =====================================================
                Environment: ${TEST_ENVIRONMENT}
                Test Suite: ${TEST_SUITE}
                Browser: ${BROWSER}
                Build: ${BUILD_NUMBER}
                
                üìà Reports Available:
                ‚Ä¢ Allure Report: Available in Jenkins UI
                ‚Ä¢ TestNG Results: Available in Test Results tab
                ‚Ä¢ Artifacts: Screenshots, logs, raw results
                =====================================================
                """
            }
        }
        success {
            echo "‚úÖ Pipeline completed successfully!"
        }
        failure {
            echo "‚ùå Pipeline failed. Check logs and reports for details."
        }
    }
}

// Simplified function to run different test suites
def runTestSuite(testSuite) {
    try {
        sh """
            # Create container for tests
            CONTAINER_ID=\$(docker create --name test-${testSuite}-${BUILD_NUMBER} \\
                -e ENVIRONMENT=${TEST_ENVIRONMENT} \\
                -e BROWSER=${BROWSER} \\
                -e HEADLESS=${HEADLESS} \\
                --shm-size=2g \\
                ${DOCKER_IMAGE}:${DOCKER_TAG})
            
            # Copy project files
            cd ${env.WORKSPACE_DIR}
            docker cp . \$CONTAINER_ID:/app/
            
            # Start container and run tests
            docker start \$CONTAINER_ID
            
            # Run appropriate test command based on suite (without clean to avoid file lock issues)
            case "${testSuite}" in
                "smoke")
                    echo "üî• Running Smoke Tests..."
                    docker exec \$CONTAINER_ID bash -c "cd /app && mvn test -Dtest=*Smoke*Test -Denvironment=${TEST_ENVIRONMENT} -Dbrowser=${BROWSER} -Dheadless=${HEADLESS} -Dmaven.test.failure.ignore=true"
                    ;;
                "api")
                    echo "üåê Running API Tests..."
                    docker exec \$CONTAINER_ID bash -c "cd /app && mvn test -Dtest=*Api*Test -Denvironment=${TEST_ENVIRONMENT} -Dmaven.test.failure.ignore=true"
                    ;;
                "ui")
                    echo "üñ•Ô∏è Running UI Tests..."
                    docker exec \$CONTAINER_ID bash -c "cd /app && mvn test -Dtest=*UI*Test -Denvironment=${TEST_ENVIRONMENT} -Dbrowser=${BROWSER} -Dheadless=${HEADLESS} -Dmaven.test.failure.ignore=true"
                    ;;
                "performance")
                    echo "‚ö° Running Performance Tests..."
                    docker exec \$CONTAINER_ID bash -c "cd /app && mvn test -Dtest=*Performance*Test -Denvironment=${TEST_ENVIRONMENT} -Dmaven.test.failure.ignore=true"
                    ;;
                "all")
                    echo "üéØ Running All Tests..."
                    docker exec \$CONTAINER_ID bash -c "cd /app && mvn test -Denvironment=${TEST_ENVIRONMENT} -Dbrowser=${BROWSER} -Dheadless=${HEADLESS} -Dmaven.test.failure.ignore=true"
                    ;;
                *)
                    echo "‚ùå Unknown test suite: ${testSuite}"
                    ;;
            esac
            
            # Copy results back
            echo "üìã Copying test results..."
            docker cp \$CONTAINER_ID:/app/target ${env.WORKSPACE_DIR}/ || echo "No target to copy"
            docker cp \$CONTAINER_ID:/app/allure-results ${env.WORKSPACE_DIR}/ || echo "No allure-results to copy"
            docker cp \$CONTAINER_ID:/app/screenshots ${env.WORKSPACE_DIR}/ || echo "No screenshots to copy"
            docker cp \$CONTAINER_ID:/app/logs ${env.WORKSPACE_DIR}/ || echo "No logs to copy"
            
            # Cleanup container
            docker stop \$CONTAINER_ID || true
            docker rm \$CONTAINER_ID || true
        """
    } catch (Exception e) {
        echo "‚ùå ${testSuite} tests failed: ${e.getMessage()}"
        // Don't fail the pipeline, let post-processing handle results
    }
} 