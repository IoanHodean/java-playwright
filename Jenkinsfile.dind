#!/usr/bin/env groovy

pipeline {
    agent any
    
    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        timeout(time: 60, unit: 'MINUTES')
        timestamps()
        ansiColor('xterm')
    }
    
    environment {
        // Docker configuration for DinD
        DOCKER_IMAGE = "test-automation"
        DOCKER_TAG = "${BUILD_NUMBER}"
        
        // Test configuration
        TEST_ENVIRONMENT = "${params.TEST_ENVIRONMENT ?: 'dev'}"
        TEST_SUITE = "${params.TEST_SUITE ?: 'smoke'}"
        BROWSER = "${params.BROWSER ?: 'chromium'}"
        HEADLESS = "${params.HEADLESS ?: 'true'}"
    }
    
    parameters {
        choice(
            name: 'TEST_ENVIRONMENT',
            choices: ['dev', 'staging', 'local'],
            description: 'Target environment for testing'
        )
        choice(
            name: 'TEST_SUITE',
            choices: ['smoke', 'api', 'ui', 'performance', 'all'],
            description: 'Test suite to execute'
        )
        choice(
            name: 'BROWSER',
            choices: ['chromium', 'firefox', 'webkit'],
            description: 'Browser for UI tests'
        )
        booleanParam(
            name: 'HEADLESS',
            defaultValue: true,
            description: 'Run tests in headless mode'
        )
    }
    
    stages {
        stage('Build Test Image') {
            steps {
                script {
                    echo "🔨 Building test automation Docker image..."
                    sh """
                        docker build -f Dockerfile.test -t ${DOCKER_IMAGE}:${DOCKER_TAG} .
                        docker tag ${DOCKER_IMAGE}:${DOCKER_TAG} ${DOCKER_IMAGE}:latest
                    """
                    echo "✅ Test image built successfully"
                }
            }
        }
        
        stage('Run Tests') {
            parallel {
                stage('API Tests') {
                    when {
                        anyOf {
                            expression { params.TEST_SUITE == 'api' }
                            expression { params.TEST_SUITE == 'all' }
                        }
                    }
                    steps {
                        script {
                            runTestsInContainer('api')
                        }
                    }
                }
                
                stage('UI Tests') {
                    when {
                        anyOf {
                            expression { params.TEST_SUITE == 'ui' }
                            expression { params.TEST_SUITE == 'all' }
                        }
                    }
                    steps {
                        script {
                            runTestsInContainer('ui')
                        }
                    }
                }
                
                stage('Performance Tests') {
                    when {
                        anyOf {
                            expression { params.TEST_SUITE == 'performance' }
                            expression { params.TEST_SUITE == 'all' }
                        }
                    }
                    steps {
                        script {
                            if (env.TEST_ENVIRONMENT != 'prod') {
                                runTestsInContainer('performance')
                            } else {
                                echo "⚠️ Skipping performance tests in production"
                            }
                        }
                    }
                }
            }
        }
        
        stage('Generate Reports') {
            steps {
                script {
                    echo "📊 Generating Allure reports..."
                    sh """
                        docker run --rm \\
                            -v \${WORKSPACE}/target:/app/target \\
                            -w /app \\
                            ${DOCKER_IMAGE}:${DOCKER_TAG} \\
                            mvn allure:report
                    """
                    
                    // Archive results
                    publishTestResults testResultsPattern: 'target/surefire-reports/*.xml'
                    
                    allure([
                        includeProperties: false,
                        jdk: '',
                        properties: [],
                        reportBuildPolicy: 'ALWAYS',
                        results: [[path: 'target/allure-results']]
                    ])
                    
                    echo "✅ Reports generated and published"
                }
            }
        }
        
        stage('Cleanup') {
            steps {
                script {
                    echo "🧹 Cleaning up Docker containers and images..."
                    sh """
                        # Stop and remove any running test containers
                        docker ps -q --filter ancestor=${DOCKER_IMAGE} | xargs -r docker stop
                        docker ps -aq --filter ancestor=${DOCKER_IMAGE} | xargs -r docker rm
                        
                        # Keep only latest 3 images
                        docker images ${DOCKER_IMAGE} --format "{{.ID}}" | tail -n +4 | xargs -r docker rmi -f || true
                    """
                    echo "✅ Cleanup completed"
                }
            }
        }
    }
    
    post {
        always {
            script {
                def testResults = getTestResults()
                def reportUrl = "${env.BUILD_URL}allure/"
                
                echo """
                =====================================================
                          Test Execution Summary
                =====================================================
                Environment: ${env.TEST_ENVIRONMENT}
                Test Suite: ${env.TEST_SUITE}
                Browser: ${env.BROWSER}
                Total Tests: ${testResults.total}
                Passed: ${testResults.passed}
                Failed: ${testResults.failed}
                Reports: ${reportUrl}
                =====================================================
                """
            }
        }
        
        success {
            echo "✅ Pipeline completed successfully!"
        }
        
        failure {
            echo "❌ Pipeline failed!"
        }
    }
}

// Helper function to run tests in Docker container
def runTestsInContainer(testSuite) {
    echo "🧪 Running ${testSuite} tests in Docker container..."
    
    try {
        def containerName = "test-${testSuite}-${BUILD_NUMBER}"
        
        sh """
            docker run --rm \\
                --name ${containerName} \\
                -v \${WORKSPACE}:/app \\
                -v \${WORKSPACE}/target:/app/target \\
                -v \${WORKSPACE}/allure-results:/app/allure-results \\
                -v \${WORKSPACE}/logs:/app/logs \\
                -v \${WORKSPACE}/screenshots:/app/screenshots \\
                -v \${WORKSPACE}/test-results:/app/test-results \\
                -e ENVIRONMENT=${env.TEST_ENVIRONMENT} \\
                -e BROWSER=${env.BROWSER} \\
                -e HEADLESS=${env.HEADLESS} \\
                --shm-size=2g \\
                ${env.DOCKER_IMAGE}:${env.DOCKER_TAG} \\
                mvn test -Dtest=*${testSuite.capitalize()}*Test \\
                    -Denvironment=${env.TEST_ENVIRONMENT} \\
                    -Dbrowser=${env.BROWSER} \\
                    -Dheadless=${env.HEADLESS} \\
                    -Dmaven.test.failure.ignore=true
        """
        
        echo "✅ ${testSuite} tests completed"
        
    } catch (Exception e) {
        echo "❌ ${testSuite} tests failed: ${e.getMessage()}"
        currentBuild.result = 'UNSTABLE'
    }
}

// Helper function to get test results
def getTestResults() {
    def results = [:]
    
    try {
        def testResults = sh(
            script: "find target/surefire-reports -name '*.xml' 2>/dev/null | wc -l || echo 0",
            returnStdout: true
        ).trim()
        
        def failedTests = sh(
            script: "find target/surefire-reports -name '*.xml' 2>/dev/null | xargs grep -l 'failure\\|error' 2>/dev/null | wc -l || echo 0",
            returnStdout: true
        ).trim()
        
        results.total = testResults as Integer
        results.failed = failedTests as Integer
        results.passed = results.total - results.failed
        
    } catch (Exception e) {
        echo "Could not parse test results: ${e.getMessage()}"
        results = [total: 0, passed: 0, failed: 0]
    }
    
    return results
} 